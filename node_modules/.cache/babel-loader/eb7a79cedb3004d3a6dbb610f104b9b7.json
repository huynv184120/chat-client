{"ast":null,"code":"import { room_action_type } from \"../actions/room\";\nconst initState = {\n  currentRoom: null,\n  listRoom: []\n};\n\nconst roomReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case room_action_type.changeRoomInfo:\n      {\n        let index = state.listRoom.findIndex(room => action.data._id === room._id);\n        state.listRoom[index] = action.data;\n        state.listRoom = [...state.listRoom];\n        return { ...state\n        };\n      }\n\n    case room_action_type.leaveRoom:\n      {\n        const rooms = state.listRoom.filter(room => action.data._id !== room._id);\n        state.listRoom = rooms;\n        return { ...state\n        };\n      }\n\n    case room_action_type.joinRoom:\n      {\n        state.listRoom = [action.data, ...state.listRoom];\n        return { ...state\n        };\n      }\n\n    case room_action_type.selectCurrentRoom:\n      {\n        state.currentRoom = action.data._id;\n        return { ...state\n        };\n      }\n\n    case room_action_type.loadRooms:\n      {\n        state.listRoom = action.data;\n        return { ...state\n        };\n      }\n\n    case room_action_type.updateLastMessage:\n      {\n        const room = state.listRoom.find(room => room._id === action.data.room_id);\n        room.lastMessage = action.data.lastMessage;\n        state.listRoom = [...state.listRoom];\n        state.listRoom.sort((a, b) => {\n          const t1 = a.lastMessage ? Date.parse(a.lastMessage.createdAt) : 0;\n          const t2 = b.lastMessage ? Date.parse(b.lastMessage.createdAt) : 0;\n          return t2 - t1;\n        });\n        return { ...state\n        };\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nexport default roomReducer;","map":{"version":3,"names":["room_action_type","initState","currentRoom","listRoom","roomReducer","state","action","type","changeRoomInfo","index","findIndex","room","data","_id","leaveRoom","rooms","filter","joinRoom","selectCurrentRoom","loadRooms","updateLastMessage","find","room_id","lastMessage","sort","a","b","t1","Date","parse","createdAt","t2"],"sources":["/home/huy/chat-module/chat-client/src/chat-module/redux/reducers/room.js"],"sourcesContent":["import { room_action_type } from \"../actions/room\";\n\nconst initState = {\n    currentRoom: null,\n    listRoom: [],\n}\n\nconst roomReducer = (state = initState, action) => {\n\n    switch (action.type) {\n        case room_action_type.changeRoomInfo: {\n            let index = state.listRoom.findIndex((room) => (action.data._id === room._id));\n            state.listRoom[index] = action.data;\n            state.listRoom = [...state.listRoom];\n            return {...state};\n        }\n        case room_action_type.leaveRoom: {\n            const rooms = state.listRoom.filter((room) => (action.data._id !== room._id));\n            state.listRoom = rooms;\n            return { ...state };\n        }\n        case room_action_type.joinRoom: {\n            state.listRoom = [action.data, ...state.listRoom];\n            return { ...state };\n        }\n        case room_action_type.selectCurrentRoom: {\n            state.currentRoom = action.data._id;\n            return { ...state };\n        }\n        case room_action_type.loadRooms: {\n            state.listRoom = action.data;\n            return { ...state };\n        }\n        case room_action_type.updateLastMessage: {\n            const room = state.listRoom.find(room => room._id === action.data.room_id);\n            room.lastMessage = action.data.lastMessage;\n            state.listRoom = [...state.listRoom];\n            state.listRoom.sort((a, b) => {\n                const t1 = a.lastMessage ? Date.parse(a.lastMessage.createdAt) : 0;\n                const t2 = b.lastMessage ? Date.parse(b.lastMessage.createdAt) : 0;\n                return t2 - t1;\n            });\n            return { ...state };\n        }\n        default: {\n            return state;\n        }\n\n    }\n}\n\n\nexport default roomReducer;"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,iBAAjC;AAEA,MAAMC,SAAS,GAAG;EACdC,WAAW,EAAE,IADC;EAEdC,QAAQ,EAAE;AAFI,CAAlB;;AAKA,MAAMC,WAAW,GAAG,YAA+B;EAAA,IAA9BC,KAA8B,uEAAtBJ,SAAsB;EAAA,IAAXK,MAAW;;EAE/C,QAAQA,MAAM,CAACC,IAAf;IACI,KAAKP,gBAAgB,CAACQ,cAAtB;MAAsC;QAClC,IAAIC,KAAK,GAAGJ,KAAK,CAACF,QAAN,CAAeO,SAAf,CAA0BC,IAAD,IAAWL,MAAM,CAACM,IAAP,CAAYC,GAAZ,KAAoBF,IAAI,CAACE,GAA7D,CAAZ;QACAR,KAAK,CAACF,QAAN,CAAeM,KAAf,IAAwBH,MAAM,CAACM,IAA/B;QACAP,KAAK,CAACF,QAAN,GAAiB,CAAC,GAAGE,KAAK,CAACF,QAAV,CAAjB;QACA,OAAO,EAAC,GAAGE;QAAJ,CAAP;MACH;;IACD,KAAKL,gBAAgB,CAACc,SAAtB;MAAiC;QAC7B,MAAMC,KAAK,GAAGV,KAAK,CAACF,QAAN,CAAea,MAAf,CAAuBL,IAAD,IAAWL,MAAM,CAACM,IAAP,CAAYC,GAAZ,KAAoBF,IAAI,CAACE,GAA1D,CAAd;QACAR,KAAK,CAACF,QAAN,GAAiBY,KAAjB;QACA,OAAO,EAAE,GAAGV;QAAL,CAAP;MACH;;IACD,KAAKL,gBAAgB,CAACiB,QAAtB;MAAgC;QAC5BZ,KAAK,CAACF,QAAN,GAAiB,CAACG,MAAM,CAACM,IAAR,EAAc,GAAGP,KAAK,CAACF,QAAvB,CAAjB;QACA,OAAO,EAAE,GAAGE;QAAL,CAAP;MACH;;IACD,KAAKL,gBAAgB,CAACkB,iBAAtB;MAAyC;QACrCb,KAAK,CAACH,WAAN,GAAoBI,MAAM,CAACM,IAAP,CAAYC,GAAhC;QACA,OAAO,EAAE,GAAGR;QAAL,CAAP;MACH;;IACD,KAAKL,gBAAgB,CAACmB,SAAtB;MAAiC;QAC7Bd,KAAK,CAACF,QAAN,GAAiBG,MAAM,CAACM,IAAxB;QACA,OAAO,EAAE,GAAGP;QAAL,CAAP;MACH;;IACD,KAAKL,gBAAgB,CAACoB,iBAAtB;MAAyC;QACrC,MAAMT,IAAI,GAAGN,KAAK,CAACF,QAAN,CAAekB,IAAf,CAAoBV,IAAI,IAAIA,IAAI,CAACE,GAAL,KAAaP,MAAM,CAACM,IAAP,CAAYU,OAArD,CAAb;QACAX,IAAI,CAACY,WAAL,GAAmBjB,MAAM,CAACM,IAAP,CAAYW,WAA/B;QACAlB,KAAK,CAACF,QAAN,GAAiB,CAAC,GAAGE,KAAK,CAACF,QAAV,CAAjB;QACAE,KAAK,CAACF,QAAN,CAAeqB,IAAf,CAAoB,CAACC,CAAD,EAAIC,CAAJ,KAAU;UAC1B,MAAMC,EAAE,GAAGF,CAAC,CAACF,WAAF,GAAgBK,IAAI,CAACC,KAAL,CAAWJ,CAAC,CAACF,WAAF,CAAcO,SAAzB,CAAhB,GAAsD,CAAjE;UACA,MAAMC,EAAE,GAAGL,CAAC,CAACH,WAAF,GAAgBK,IAAI,CAACC,KAAL,CAAWH,CAAC,CAACH,WAAF,CAAcO,SAAzB,CAAhB,GAAsD,CAAjE;UACA,OAAOC,EAAE,GAAGJ,EAAZ;QACH,CAJD;QAKA,OAAO,EAAE,GAAGtB;QAAL,CAAP;MACH;;IACD;MAAS;QACL,OAAOA,KAAP;MACH;EArCL;AAwCH,CA1CD;;AA6CA,eAAeD,WAAf"},"metadata":{},"sourceType":"module"}